static const char* script_console =
"((function () {\n"
"    return {\n"
"        \"log\" : function (...args) {\n"
"            native_print(\"log\", args.join(' '));\n"
"        },\n"
"        \"info\" : function () {\n"
"            native_print(\"info\", args.join(' '));\n"
"        },\n"
"        \"warn\" : function () {\n"
"            native_print(\"warn\", args.join(' '));\n"
"        },\n"
"        \"error\" : function () {\n"
"            native_print(\"error\", args.join(' '));\n"
"        },\n"
"        \"assert\" : function (condition, info) {\n"
"            if(condition) {\n"
"                native_abort(\"\" + info);\n"
"            }\n"
"        },\n"
"        \"trace\" : function () {\n"
"            native_trace();\n"
"        },\n"
"        \"profile\" : function (name) {\n"
"            native_profile(\"\" + name);\n"
"        },\n"
"        \"profileEnd\" : function () {\n"
"            native_profile();\n"
"        }\n"
"    };\n"
"})())\n"
;

static const char* script_blueprint =
"(function (exports) {\n"
"    \"use strict\";\n"
"    var exports = {};\n"
"    var BPFieldInfo = (function () {\n"
"        function BPFieldInfo(Static, Name, Type, IsArray) {\n"
"            this.IsStatic = Static;\n"
"            this.Type = Type;\n"
"            this.Name = Name;\n"
"            this.Type = Type ? Type : \"\";\n"
"            this.IsArray = IsArray ? true : false;\n"
"            if (typeof Type !== 'undefined' && typeof IsArray === 'undefined') {\n"
"                this.setType(Type);\n"
"            }\n"
"        }\n"
"        BPFieldInfo.prototype.setType = function (Type) {\n"
"            if (Type.substr(Type.length - 2) === '[]') {\n"
"                this.Type = Type.substr(0, Type.length - 2);\n"
"                this.IsArray = true;\n"
"            }\n"
"        };\n"
"        return BPFieldInfo;\n"
"    }());\n"
"    exports.BPFieldInfo = BPFieldInfo;\n"
"    ;\n"
"    var BPMethodInfo = (function () {\n"
"        function BPMethodInfo(Static, Name) {\n"
"            this.Static = Static;\n"
"            this.Name = typeof Name === 'string' ? Name : \"\";\n"
"            this.Parameters = [];\n"
"            this.ReturnValue = null;\n"
"        }\n"
"        return BPMethodInfo;\n"
"    }());\n"
"    exports.BPMethodInfo = BPMethodInfo;\n"
"    var BPClassInfo = (function () {\n"
"        function BPClassInfo() {\n"
"            this.ClassName = \"\";\n"
"            this.ParentClassName = \"\";\n"
"            this.Fields = [];\n"
"            this.Methods = [];\n"
"        }\n"
"        BPClassInfo.prototype.addMember = function (FieldInfo) {\n"
"            this.Fields.push(FieldInfo);\n"
"        };\n"
"        BPClassInfo.prototype.addMethod = function (MethodInfo) {\n"
"            this.Methods.push(MethodInfo);\n"
"        };\n"
"        BPClassInfo.prototype.getMember = function (IsStatic, Name) {\n"
"            for (var i = 0; i < this.Fields.length; i++) {\n"
"                if (this.Fields[i].Name == Name && this.Fields[i].IsStatic == IsStatic) {\n"
"                    return this.Fields[i];\n"
"                }\n"
"            }\n"
"            if (Name[0] >= \"A\" && Name[0] <= \"Z\") {\n"
"                var info = new BPFieldInfo(IsStatic, Name);\n"
"                this.Fields.push(info);\n"
"                return info;\n"
"            }\n"
"            return null;\n"
"        };\n"
"        BPClassInfo.prototype.getMethod = function (Static, Name) {\n"
"            for (var i = 0; i < this.Methods.length; i++) {\n"
"                if (this.Methods[i].Name == Name && this.Methods[i].Static == Static) {\n"
"                    return this.Methods[i];\n"
"                }\n"
"            }\n"
"            if (Name[0] >= \"A\" && Name[0] <= \"Z\") {\n"
"                var info = new BPMethodInfo(Static, Name);\n"
"                this.Methods.push(info);\n"
"                return info;\n"
"            }\n"
"            return null;\n"
"        };\n"
"        return BPClassInfo;\n"
"    }());\n"
"    exports.BPClassInfo = BPClassInfo;\n"
"    ;\n"
"    function getClassName(obj) {\n"
"        if (typeof obj === 'function') {\n"
"            return obj.prototype.constructor.name;\n"
"        }\n"
"        else {\n"
"            return Object.getPrototypeOf(obj).constructor.name;\n"
"        }\n"
"    }\n"
"    exports.getClassName = getClassName;\n"
"    function getParentClassName(obj) {\n"
"        if (typeof obj === 'function') {\n"
"            return Object.getPrototypeOf(obj.prototype).constructor.name;\n"
"        }\n"
"        else {\n"
"            return Object.getPrototypeOf(Object.getPrototypeOf(obj)).constructor.name;\n"
"        }\n"
"    }\n"
"    exports.getParentClassName = getParentClassName;\n"
"    var BPClassMap = {};\n"
"    function GetAllBPClassInfo() {\n"
"        var retval = [];\n"
"        for (var name in BPClassMap) {\n"
"            if (!BPClassMap.hasOwnProperty(name))\n"
"                continue;\n"
"            retval.push(BPClassMap[name]);\n"
"        }\n"
"        return retval;\n"
"    }\n"
"    exports.GetAllBPClassInfo = GetAllBPClassInfo;\n"
"    function getBPInfo(obj) {\n"
"        if (typeof obj === 'function') {\n"
"            var bp = obj.prototype.bpInfo;\n"
"            return Object.getPrototypeOf(bp).constructor.name === 'BPClassInfo' ? bp : null;\n"
"        }\n"
"        else if (typeof obj === 'object') {\n"
"            var bp = Object.getPrototypeOf(obj).bpInfo;\n"
"            return Object.getPrototypeOf(bp).constructor.name === 'BPClassInfo' ? bp : null;\n"
"        }\n"
"        else if (typeof obj === 'string') {\n"
"            if (BPClassMap.hasOwnProperty(obj)) {\n"
"                return BPClassMap[obj];\n"
"            }\n"
"        }\n"
"        return null;\n"
"    }\n"
"    exports.getBPInfo = getBPInfo;\n"
"    function updateBPInfo(text) {\n"
"        var lines = text.split('\\n');\n"
"        var bpClass = null;\n"
"        for (var lineno = 0; lineno < lines.length; lineno++) {\n"
"            if (!bpClass) {\n"
"                var words = lines[lineno].trim().split(' ');\n"
"                var start = 0;\n"
"                if (words[start] === 'export')\n"
"                    start += 1;\n"
"                if (words[start] === 'default')\n"
"                    start += 1;\n"
"                if (words[start] === 'class') {\n"
"                    var className;\n"
"                    var parentName;\n"
"                    if (words[start + 2] === 'extends') {\n"
"                        className = words[start + 1];\n"
"                        parentName = words[start + 3];\n"
"                    }\n"
"                    else {\n"
"                        className = words[start + 1];\n"
"                        parentName = \"\";\n"
"                    }\n"
"                    bpClass = getBPInfo(className);\n"
"                    if (bpClass) {\n"
"                        bpClass.ParentClassName = parentName;\n"
"                    }\n"
"                }\n"
"                continue;\n"
"            }\n"
"            var line = lines[lineno].trim();\n"
"            if (line == '}') {\n"
"                bpClass = null;\n"
"                continue;\n"
"            }\n"
"            line = line.substring(0, line.length - 1);\n"
"            if (line.indexOf('private ') == 0) {\n"
"                continue;\n"
"            }\n"
"            var isStatic = false;\n"
"            if (line.indexOf('static ') == 0) {\n"
"                line = line.substr(7);\n"
"                isStatic = true;\n"
"            }\n"
"            var pos = line.lastIndexOf(':');\n"
"            if (pos < 0)\n"
"                continue;\n"
"            var stype = line.substr(pos + 1).trim();\n"
"            line = line.substr(0, pos).trim();\n"
"            pos = line.indexOf('(');\n"
"            if (pos <= 0) {\n"
"                var member = bpClass.getMember(isStatic, line);\n"
"                if (member) {\n"
"                    member.setType(stype);\n"
"                }\n"
"            }\n"
"            else {\n"
"                var method = bpClass.getMethod(isStatic, line.substr(0, pos));\n"
"                if (method) {\n"
"                    if (stype !== 'void') {\n"
"                        method.ReturnValue = new BPFieldInfo(false, \"\", stype);\n"
"                    }\n"
"                    var sparam = line.substr(pos + 1, line.length - pos - 1 - 1).split(',');\n"
"                    for (var i = 0; i < sparam.length; i++) {\n"
"                        if (sparam[i].length > 0) {\n"
"                            pos = sparam[i].indexOf(':');\n"
"                            method.Parameters.push(new BPFieldInfo(false, sparam[i].substr(0, pos).trim(), sparam[i].substr(pos + 1).trim()));\n"
"                        }\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    exports.updateBPInfo = updateBPInfo;\n"
"    var __registerClass = typeof registerClass === \"function\" ? registerClass : function () { };\n"
"    function blueprint(target) {\n"
"        if (typeof target === 'function') {\n"
"            var bp = target.prototype.bpInfo ? target.prototype.bpInfo : (target.prototype.bpInfo = new BPClassInfo);\n"
"            bp.ClassName = getClassName(target);\n"
"            BPClassMap[bp.ClassName] = bp;\n"
"            __registerClass(bp.ClassName, target, bp);\n"
"        }\n"
"    }\n"
"    exports.blueprint = blueprint;\n"
"    return exports;\n"
"})()\n"
;
